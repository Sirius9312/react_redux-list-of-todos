{"version":3,"sources":["enums/StatusFilterSelect.ts","app/hooks.ts","features/currentTodo.ts","components/TodoList/TodoList.tsx","features/filter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","features/todos.ts","App.tsx","app/store.ts","index.tsx"],"names":["StatusFilterSelect","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","todo","type","payload","currentTodoReducer","state","action","TodoList","todos","filter","query","status","dispatch","currentTodo","filterTodos","useMemo","filteredByTodos","completed","ALL","ACTIVE","COMPLETED","title","toLowerCase","includes","length","className","map","id","onClick","actionsCurrentTodo","startBeforeFilter","selectAction","filterReducer","TodoFilter","onSubmit","e","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","loadingModal","setLoadingModal","user","setUser","useEffect","userId","finally","href","email","name","todosReducer","App","loading","setLoading","todOs","todosActions","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,2DAAAA,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KCGL,IAAMC,EAAoCC,IACpCC,EAAkDC,ICYlDC,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAGED,EAPM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OC5BAE,EAAqB,WAChC,IAAMC,EAAQV,GAAe,SAAAO,GAAK,OAAIA,EAAMG,SAC5C,EAA0BV,GAAe,SAAAO,GAAK,OAAIA,EAAMI,UAAhDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAETC,EAAWhB,IACXiB,EAAcf,GAAe,SAAAO,GAAK,OAAIA,EAAMQ,eAE5CC,EAAcC,mBAAQ,WAC1B,IAAMC,EAAkBR,EAAMC,QAAO,SAACR,GACpC,IAAQgB,EAAchB,EAAdgB,UAER,OAAQN,GACN,KAAKhB,EAAmBuB,IAAK,OAAO,EACpC,KAAKvB,EAAmBwB,OAAQ,OAAQF,EACxC,KAAKtB,EAAmByB,UAAW,OAAOH,EAC1C,QAAS,OAAO,MAQpB,OAJ6BP,EACzBM,EAAgBP,QAAO,SAACR,GAAD,OAAUA,EAAKoB,MACrCC,cAAcC,SAASb,EAAMY,kBAAkBN,IAGnD,CAACN,EAAOC,EAAQH,IAEnB,OACGM,EAAYU,OAKX,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCAEIX,EAAYY,KAAI,SAACzB,GAAD,OACd,qBAEE,UAAQ,OACRwB,UACEZ,EAAc,4BAA8B,GAJhD,UAOE,oBAAIY,UAAU,eAAd,SAA8BxB,EAAK0B,KACnC,oBAAIF,UAAU,eAAd,SAEIxB,EAAKgB,WACH,sBAAMQ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKrB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWxB,EAAKgB,UACf,mBACA,kBAFJ,SAIGhB,EAAKoB,UAGV,oBAAII,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVvB,KAAK,SACL0B,QAAS,kBAAMhB,EAASiB,EAA2B5B,KAJrD,SAME,sBAAMwB,UAAU,OAAhB,SACE,mBAAGA,UACDZ,EACI,mBACA,uBAnCPZ,EAAK0B,YAtBpB,mBAAGF,UAAU,0BAAb,kE,OCNAK,EAA4B,CAAEpB,MAAO,GAAIC,OAAQhB,EAAmBuB,KAuB7DlB,EA5CU,SAAC+B,GACtB,MAAO,CACL7B,KAAM,gBACNC,QAAS4B,IAyCA/B,EArCS,SAACU,GACrB,MAAO,CACLR,KAAM,eACNC,QAASO,IAoCEsB,EAvBO,WAA0D,IAAzD3B,EAAwD,uDAAhDyB,EAAmB9B,EAA6B,uCAC7E,OAAQA,EAAQE,MACd,IAAK,gBACH,OAAO,2BACFG,GADL,IAEEM,OAAQX,EAAQG,UAIpB,IAAK,eACH,OAAO,2BACFE,GADL,IAEEK,MAAOV,EAAQG,UAInB,QACE,OAAOE,ICzCA4B,EAAuB,WAClC,IAIMrB,EAAWhB,IAEjB,EAA0BE,GAAe,SAAAO,GAAK,OAAIA,EAAMI,UAAhDC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAEf,OACE,uBACEc,UAAU,mBACVS,SAXiB,SAACC,GACpBA,EAAEC,kBAQF,UAIE,mBAAGX,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRY,MAAO1B,EACP2B,SAAU,SAACH,GACTvB,EAAS2B,EAA6BJ,EAAEK,OAAOH,SAJnD,UAOE,wBAAQA,MAAO1C,EAAmBuB,IAAlC,iBACA,wBAAQmB,MAAO1C,EAAmBwB,OAAlC,oBACA,wBAAQkB,MAAO1C,EAAmByB,UAAlC,8BAKN,oBAAGK,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRvB,KAAK,OACLuB,UAAU,QACVgB,YAAY,YACZJ,MAAO3B,EACP4B,SAAU,SAACH,GACTvB,EAAS2B,EAA4BJ,EAAEK,OAAOH,WAGlD,sBAAMZ,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBiB,MAAO,CAAEC,cAAe,OAAxD,SAEIjC,GAEE,wBACE,UAAQ,oBACRR,KAAK,SACLuB,UAAU,SACVG,QAAS,kBAAMhB,EAAS2B,EAA4B,iBCvDvDK,G,MAAmB,kBAC9B,qBAAKnB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASoB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,IAAM5C,EAAWhB,IACXiB,EAAcf,GAAe,SAAAO,GAAK,OAAIA,EAAMQ,eAElD,EAAwC4C,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwBF,mBAAsB,MAA9C,mBAAOG,EAAP,KAAaC,EAAb,KAUA,OARAC,qBAAU,WDUW,IAACC,ECTpBJ,GAAgB,IDSII,ECPb,OAAClD,QAAD,IAACA,OAAD,EAACA,EAAakD,ODOelB,EAAG,iBAAiBkB,KCNrDX,KAAKS,GACLG,SAAQ,kBAAML,GAAgB,QAChC,QAAC9C,QAAD,IAACA,OAAD,EAACA,EAAakD,SAGf,sBAAKtC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdiC,EACC,cAAC,EAAD,IAEA,sBAAKjC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYZ,QAJZ,IAIYA,OAJZ,EAIYA,EAAac,MAIzB,wBACEzB,KAAK,SACLuB,UAAU,SACV,UAAQ,cACRG,QAAS,kBAAMhB,EAASiB,WAI5B,sBAAKJ,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGZ,QADH,IACGA,OADH,EACGA,EAAaQ,QAGhB,oBAAGI,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAXZ,QAAW,IAAXA,KAAaI,UACZ,wBAAQQ,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAGwC,KAAI,wBAAYL,QAAZ,IAAYA,OAAZ,EAAYA,EAAMM,OAAzB,gBACGN,QADH,IACGA,OADH,EACGA,EAAMO,oB,QCzCVnE,EAjBI,SAACQ,GAChB,MAAO,CACLN,KAAM,YACNC,QAASK,IAgBE4D,EAZM,WAA0D,IAAzD/D,EAAwD,uDAAxC,GAAIL,EAAoC,uCAC5E,MACO,cADCA,EAAQE,KAEN,GAAN,mBAAWG,GAAX,YAAqBL,EAAQG,UAGtBE,GCLAgE,EAAgB,WAC3B,IAAMzD,EAAWhB,IACXY,EAAQV,GAAe,SAAAO,GAAK,OAAIA,EAAMG,SACtCK,EAAcf,GAAe,SAAAO,GAAK,OAAIA,EAAMQ,eAElD,EAA8B4C,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KASA,OAPAT,qBAAU,WACRS,GAAW,GHCe1B,EAAY,UGCnCO,MAAK,SAACoB,GAAD,OAAW5D,EAAS6D,EAAsBD,OAC/CR,SAAQ,kBAAMO,GAAW,QAC3B,IAGD,qCACE,qBAAK9C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,sBAAKA,UAAU,QAAf,UAEI6C,GACE,cAAC,EAAD,KAIFA,KAAa9D,EAAMgB,QACnB,cAAC,EAAD,cAOTX,GACC,cAAC,EAAD,Q,uBC7CF6D,EAAcC,0BAAgB,CAClC9D,YAAaT,EACbK,OAAQuB,EACRxB,MAAO4D,IAIIQ,EAAQC,sBACnBH,EACAI,8BACEC,0BAAgBC,OCbdC,EAAO,kBACX,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,OAIJM,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.84c49056.chunk.js","sourcesContent":["export enum StatusFilterSelect {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import React, { useMemo } from 'react';\nimport { StatusFilterSelect } from '../../enums/StatusFilterSelect';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const filterTodos = useMemo(() => {\n    const filteredByTodos = todos.filter((todo) => {\n      const { completed } = todo;\n\n      switch (status) {\n        case StatusFilterSelect.ALL: return true;\n        case StatusFilterSelect.ACTIVE: return !completed;\n        case StatusFilterSelect.COMPLETED: return completed;\n        default: return true;\n      }\n    });\n\n    const filteredByQueryTodos = query\n      ? filteredByTodos.filter((todo) => todo.title\n        .toLowerCase().includes(query.toLowerCase())) : filteredByTodos;\n\n    return filteredByQueryTodos;\n  }, [query, status, todos]);\n\n  return (\n    !filterTodos.length ? (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    ) : (\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            filterTodos.map((todo) => (\n              <tr\n                key={todo.id}\n                data-cy=\"todo\"\n                className={\n                  currentTodo ? 'has-background-info-light' : ''\n                }\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {\n                    todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )\n                  }\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(actionsCurrentTodo.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className={\n                        currentTodo\n                          ? 'far fa-eye-slash'\n                          : 'far fa-eye'\n                      }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    )\n  );\n};\n","import { StatusFilterSelect } from '../enums/StatusFilterSelect';\nimport { Status } from '../types/Status';\n\ntype ActionFilterBySelect = { type: 'filter/SELECT', payload: Status };\ntype ActionFilterByQuery = { type: 'filter/QUERY', payload: string };\n\nconst filterBySelect = (selectAction: Status): ActionFilterBySelect => {\n  return {\n    type: 'filter/SELECT',\n    payload: selectAction,\n  };\n};\n\nconst filterByQuery = (query: string): ActionFilterByQuery => {\n  return {\n    type: 'filter/QUERY',\n    payload: query,\n  };\n};\n\ntype Actions = ActionFilterBySelect | ActionFilterByQuery;\n\ntype Filter = {\n  query: string,\n  status: Status,\n};\n\nconst startBeforeFilter: Filter = { query: '', status: StatusFilterSelect.ALL };\n\nconst filterReducer = (state = startBeforeFilter, actions: Actions): Filter => {\n  switch (actions.type) {\n    case 'filter/SELECT': {\n      return {\n        ...state,\n        status: actions.payload,\n      };\n    }\n\n    case 'filter/QUERY': {\n      return {\n        ...state,\n        query: actions.payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { filterBySelect, filterByQuery };\n\nexport default filterReducer;\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { StatusFilterSelect } from '../../enums/StatusFilterSelect';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n  };\n\n  const dispatch = useAppDispatch();\n\n  const { query, status } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => {\n              dispatch(filterActions.filterBySelect(e.target.value as Status));\n            }}\n          >\n            <option value={StatusFilterSelect.ALL}>All</option>\n            <option value={StatusFilterSelect.ACTIVE}>Active</option>\n            <option value={StatusFilterSelect.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => {\n            dispatch(filterActions.filterByQuery(e.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {\n            query && (\n              /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => dispatch(filterActions.filterByQuery(''))}\n              />\n            )\n          }\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const getUser = (userId: any) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [loadingModal, setLoadingModal] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setLoadingModal(true);\n\n    getUser(currentTodo?.userId)\n      .then(setUser)\n      .finally(() => setLoadingModal(false));\n  }, [currentTodo?.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loadingModal ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actionsCurrentTodo.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\ntype ActionSetTodos = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): ActionSetTodos => {\n  return {\n    type: 'todos/SET',\n    payload: todos,\n  };\n};\n\nconst todosReducer = (state: Todo[] = [], actions: ActionSetTodos): Todo[] => {\n  switch (actions.type) {\n    case 'todos/SET':\n      return [...state, ...actions.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then((todOs) => dispatch(todosActions.setTodos(todOs)))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                loading && (\n                  <Loader />\n                )\n              }\n\n              {!loading && !!todos.length && (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}